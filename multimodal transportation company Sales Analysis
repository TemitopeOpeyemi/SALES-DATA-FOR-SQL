Select *
From sales_data_sample;

Select ORDERNUMBER,QUANTITYORDERED, PRICEEACH, SALES, STATUS, ORDERDATE, QTR_ID, MONTH_ID, YEAR_ID, PRODUCTLINE, DEALSIZE
From sales_data_sample;

CREATE TABLE sales_data
LIKE sales_data_sample;

SELECT *
FROM sales_data;

SELECT DISTINCT PRODUCTLINE
FROM sales_data;

INSERT INTO sales_data
SELECT *
FROM sales_data_sample;

-- Identify and remove duplicates

SELECT *,
ROW_NUMBER() OVER(
PARTITION BY ORDERNUMBER, QUANTITYORDERED, PRICEEACH, SALES, ORDERDATE, STATUS, QTR_ID, MONTH_ID, YEAR_ID, PRODUCTLINE, MSRP, PRODUCTCODE, CUSTOMERNAME, CITY, STATE, COUNTRY, DEALSIZE) AS NUM_ROW
FROM sales_data;

WITH DUPLICATE_CTE AS
(SELECT *,
ROW_NUMBER() OVER(
PARTITION BY ORDERNUMBER, QUANTITYORDERED, PRICEEACH, ORDERLINENUMBER, SALES, ORDERDATE, STATUS, QTR_ID, MONTH_ID, YEAR_ID, PRODUCTLINE, MSRP, PRODUCTCODE, CUSTOMERNAME, PHONE, ADDRESSLINE1, ADDRESSLINE2, CITY, STATE, POSTALCODE, COUNTRY, TERRITORY, CONTACTLASTNAME, CONTACTFIRSTNAME, DEALSIZE) AS NUM_ROW
FROM sales_data)
SELECT * 
FROM DUPLICATE_CTE
WHERE NUM_ROW > 1;


--- STANDARDIZINGDATA

SELECT DISTINCT(CUSTOMERNAME)
FROM sales_data
ORDER BY 1;

SELECT DISTINCT(CITY)
FROM sales_data
ORDER BY 1;

SELECT DISTINCT(STATE)
FROM sales_data
ORDER BY 1;

SELECT STR_TO_DATE(ORDERDATE, '%m/%d/%Y %H:%i') AS converted_datetime
FROM sales_data ;

UPDATE sales_data
SET ORDERDATE = STR_TO_DATE(ORDERDATE, '%m/%d/%Y %H:%i')
WHERE ORDERNUMBER IS NOT NULL;

ALTER TABLE sales_data
MODIFY COLUMN ORDERDATE DATE;

SELECT ORDERDATE
FROM sales_data;

-- removing null and blank columns

SELECT *
FROM sales_data
WHERE SALES IS NULL
AND QUANTITYORDERED IS NULL;

SELECT *
FROM sales_data
WHERE SALES IS NULL
OR SALES = '';

DELETE 
FROM sales_data
WHERE SALES IS NULL
AND QUANTITYORDERED IS NULL;

SELECT  DISTINCT(PRODUCTLINE), YEAR(ORDERDATE) AS EXTRACTED_YEAR, STATUS, SUM(SALES)
FROM sales_data
GROUP BY PRODUCTLINE, ORDERDATE, STATUS
;
-- EXPLORATORY DATA FOR SALES
-- PRODUCT WITH THE HIGHEST SALE  AND SUCCESSFULLY SHIPPED IN 2023
SELECT DISTINCT(PRODUCTLINE), STATUS, MAX(SALES), YEAR_ID
FROM sales_data
WHERE STATUS = 'Shipped'
AND YEAR_ID = 2005
GROUP BY PRODUCTLINE, STATUS, YEAR_ID
ORDER BY MAX(SALES) DESC;

SELECT DISTINCT(PRODUCTLINE), STATUS, MAX(SALES), YEAR_ID
FROM sales_data
WHERE STATUS = 'Shipped'
AND YEAR_ID = 2004
GROUP BY PRODUCTLINE, STATUS, YEAR_ID
ORDER BY MAX(SALES) DESC;

SELECT DISTINCT(STATUS)
FROM saLes_data;

SELECT DISTINCT(PRODUCTLINE), COUNT(SALES), YEAR_ID
FROM sales_data
WHERE STATUS = 'Shipped'
GROUP BY PRODUCTLINE, YEAR_ID
ORDER BY COUNT(SALES) DESC, PRODUCTLINE;

-- NUMBER OF TIMES WHERE PRODUCT ORDERS WERE CANCELLED AND SHIPPED IN EACH YEAR

SELECT DISTINCT(PRODUCTLINE), STATUS, COUNT(SALES), YEAR_ID
FROM sales_data
WHERE STATUS IN ('Cancelled', 'Shipped')
GROUP BY PRODUCTLINE, YEAR_ID, STATUS
ORDER BY STATUS DESC, YEAR_ID;

SELECT DISTINCT(PRODUCTLINE), STATUS, COUNT(SALES), YEAR_ID
FROM sales_data
WHERE STATUS IN ('Disputed', 'Resolved') 
GROUP BY PRODUCTLINE, YEAR_ID, STATUS
ORDER BY STATUS DESC, YEAR_ID;

--- PREDICTED SALE FOR THE NEXT YEAR


WITH SALESHISTORY AS (
		SELECT 
				PRODUCTLINE, YEAR_ID, SUM(SALES) AS TOTALSALES
		FROM sales_data
        WHERE STATUS = 'Shipped'
        GROUP BY PRODUCTLINE, YEAR_ID
        ORDER BY YEAR_ID, TOTALSALES DESC),
        SALESGROWTH AS (
					SELECT PRODUCTLINE, YEAR_ID, TOTALSALES,
                    LAG(TOTALSALES) OVER (PARTITION BY PRODUCTLINE ORDER BY YEAR_ID) AS PREVIOUS_YEAR_SALES
                    FROM SALESHISTORY
                    ),
GROWTHRATE AS (
				SELECT PRODUCTLINE, AVG(TOTALSALES - PREVIOUS_YEAR_SALES / PREVIOUS_YEAR_SALES) AS AVG_GROWTHRATE
                FROM SALESGROWTH
                WHERE PREVIOUS_YEAR_SALES IS NOT NULL
                GROUP BY PRODUCTLINE
			),
ESTIMATEDFUTURE_SALES AS (
				SELECT sg.PRODUCTLINE, SUM(TOTALSALES) AS LAST_YEAR_SALES,
						SUM(TOTALSALES) * (1 + AVG_GROWTHRATE)  AS PREDICTED_SALES_NEXT_YEAR
				FROM SALESGROWTH sg
                JOIN
						GROWTHRATE gr ON sg.PRODUCTLINE = gr.PRODUCTLINE
				WHERE 
						YEAR_ID = (SELECT MAX(YEAR_ID) FROM SALESHISTORY)
                GROUP BY 
							sg.PRODUCTLINE, gr.AVG_GROWTHRATE)
                SELECT 
						PRODUCTLINE,PREDICTED_SALES_NEXT_YEAR
        FROM 			ESTIMATEDFUTURE_SALES
        ORDER BY 		PREDICTED_SALES_NEXT_YEAR DESC;
